plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = project.maven_group
version = project.version

def targetJavaVersion = 17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}


java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name

}



repositories {
    mavenCentral()
}

dependencies {
    implementation shadow("org.tomlj:tomlj:${project.tomlj_version}")
    implementation shadow("org.antlr:antlr4-runtime:${project.antlr4_version}")
    compileOnly("org.jetbrains:annotations:${project.annotations_version}")
}

artifacts {
    archives jar
    archives shadowJar
}

shadowJar {
    project.configurations.shadow.setTransitive(false);
    configurations = [project.configurations.shadow]
    archiveClassifier = ""
    relocate 'org.tomlj', "cn.evole.libs.tomlj"
    relocate 'org.antlr', "cn.evole.libs.antlr"
    archiveBaseName.set(project.archives_base_name)
    archiveVersion.set(project.version)

}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            version = "${project.version}"
            artifactId = "${project.archives_base_name}"
            groupId = "${project.maven_group}"
        }
    }

    repositories {
        if (System.getenv('MAVEN_USERNAME') != null && System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'release'
                url = 'https://maven.nova-committee.cn/releases'

                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}
